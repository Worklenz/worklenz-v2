import { PlusOutlined } from '@ant-design/icons';
import {
  Button,
  Divider,
  Flex,
  Form,
  Input,
  message,
  Modal,
  Select,
  Tooltip,
  Typography,
} from 'antd';
import React, { useState } from 'react';
import { themeWiseColor } from '../../../../../../../utils/themeWiseColor';
import { useAppSelector } from '../../../../../../../hooks/useAppSelector';
import SelectionTypeColumn from './selection-type-column/selection-type-column';
import NumberTypeColumn from './number-type-column/number-type-column';
import LabelTypeColumn from './label-type-column/label-type-column';
import FormulaTypeColumn from './formula-type-column/formula-type-column';
import {
  addCustomColumn,
  CustomTableColumnsType,
} from '../../../../../../../features/projects/singleProject/taskListColumns/taskColumnsSlice';
import { useAppDispatch } from '../../../../../../../hooks/useAppDispatch';
import CustomColumnHeader from '../custom-column-header/custom-column-header';
import { nanoid } from '@reduxjs/toolkit';

type FieldsTypes =
  | 'people'
  | 'number'
  | 'date'
  | 'selection'
  | 'checkbox'
  | 'labels'
  | 'key'
  | 'formula';

const AddCustomColumnButton = () => {
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [fieldType, setFieldType] = useState<FieldsTypes>('people');

  const [mainForm] = Form.useForm();

  //   get theme details from theme reducer
  const themeMode = useAppSelector((state) => state.themeReducer.mode);

  const dispatch = useAppDispatch();

  //   function to open modal
  const handleModalOpen = () => {
    setIsModalOpen(true);
  };

  //   fuction to handle cancel
  const handleCancel = () => {
    setIsModalOpen(false);
  };

  const fieldTypesOptions = [
    {
      key: 'people',
      value: 'people',
      label: 'People',
    },
    {
      key: 'number',
      value: 'number',
      label: 'Number',
    },
    {
      key: 'date',
      value: 'date',
      label: 'Date',
    },
    {
      key: 'selection',
      value: 'selection',
      label: 'Selection',
    },
    {
      key: 'checkbox',
      value: 'checkbox',
      label: 'Checkbox',
    },
    {
      key: 'labels',
      value: 'labels',
      label: 'Labels',
    },
    {
      key: 'key',
      value: 'key',
      label: 'Key',
    },
    {
      key: 'formula',
      value: 'formula',
      label: 'Formula',
    },
  ];

  // function to handle form submit
  const handleFormSubmit = async (value: any) => {
    try {
      const columnKey = nanoid(); // this id is random and unique, generated by redux

      const newColumn: CustomTableColumnsType = {
        key: columnKey,
        name: value.fieldTitle,
        columnHeader: (
          <CustomColumnHeader
            columnKey={columnKey}
            columnName={value.fieldTitle}
          />
        ),
        width: 150,
        isVisible: true,
        isCustomColumn: true,
        customColumnObj: value,
      };

      await dispatch(addCustomColumn(newColumn));
      message.success('column added!');
      handleCancel();
    } catch (error) {
      console.error(error);
    }

    console.log(value);
    mainForm.resetFields();
  };

  return (
    <>
      <Tooltip title={'Add a custom column'}>
        <Button
          icon={<PlusOutlined />}
          style={{
            background: 'transparent',
            border: 'none',
            boxShadow: 'none',
          }}
          onClick={handleModalOpen}
        />
      </Tooltip>

      <Modal
        title={'Add field'}
        centered
        open={isModalOpen}
        onCancel={handleCancel}
        styles={{
          header: { position: 'relative' },
          footer: { display: 'none' },
        }}
      >
        <Divider style={{ position: 'absolute', left: 0, top: 32 }} />

        <Form
          form={mainForm}
          layout="vertical"
          onFinish={handleFormSubmit}
          style={{ marginBlockStart: 24 }}
        >
          <Flex gap={16} align="center" justify="space-between">
            <Form.Item
              name={'fieldTitle'}
              label={<Typography.Text>Field title</Typography.Text>}
              layout="vertical"
            >
              <Input
                placeholder="title"
                style={{ minWidth: '100%', width: 300 }}
              />
            </Form.Item>

            <Form.Item
              name={'fieldType'}
              label={<Typography.Text>Type</Typography.Text>}
              layout="vertical"
            >
              <Select
                options={fieldTypesOptions}
                defaultValue={fieldType}
                value={fieldType}
                onChange={(value) => setFieldType(value)}
                style={{
                  minWidth: '100%',
                  width: 150,
                  border: `1px solid ${themeWiseColor('#d9d9d9', '#424242', themeMode)}`,
                  borderRadius: 4,
                }}
              />
            </Form.Item>
          </Flex>

          {/* render form items based on types  */}
          {fieldType === 'selection' && <SelectionTypeColumn />}
          {fieldType === 'number' && <NumberTypeColumn />}
          {fieldType === 'labels' && <LabelTypeColumn />}
          {fieldType === 'formula' && <FormulaTypeColumn />}

          <Flex
            gap={8}
            align="center"
            justify="flex-end"
            style={{ marginBlockStart: 24 }}
          >
            <Button onClick={handleCancel}>Cancel</Button>
            <Button type="primary" htmlType="submit">
              Create
            </Button>
          </Flex>
        </Form>

        <Divider style={{ position: 'absolute', left: 0, bottom: 42 }} />
      </Modal>
    </>
  );
};

export default AddCustomColumnButton;
